#include<iostream>
using namespace std;

int main() {
//	// 1.数组 
//	int arr[] = {100, 200, 300};
//	cout << "---------操作前---------" << endl;
//	for(int i=0;i<3;i++) {
//		cout << arr[i] << endl;
//	}
	
//	// 指针指向数组第一个元素 
//	int *p = arr;s
//	// 修改数组第一个元素值 
//	*p = 400;
//	// 指针运算，+1后指向数组第二个元素 
//	*(p+1) = 500;
//	for(int i=0;i<3;i++) {
//		cout << arr[i] << endl;
//	}

//	// 2.指针数组 
//	int *p[3];
//	for(int i=0;i<3;i++) {
//		p[i] = &arr[i];
//	}
//	cout << "---------操作后---------" << endl;
//	for(int i=0;i<3;i++) {
//		cout << *p[i] << endl;
//	}
	
	// 3.数组指针(也称为行指针)
	// 优先级高，首先说明p是一个指针，指向一个整型的一维数组，这个一维数组的长度是n，也可以说是p的步长。
	// 执行 p+1 时，p要跨过n个整型数据的长度。 
	// int (*p)[n]; 
	
	int a[3][4] = {  
		{0, 1, 2, 3} ,   /*  初始化索引号为 0 的行 */
		{4, 5, 6, 7} ,   /*  初始化索引号为 1 的行 */
		{8, 9, 10, 11}   /*  初始化索引号为 2 的行 */
	};
	cout << "---------操作前---------" << endl;
	for ( int i = 0; i < 3; i++ ) {
		for ( int j = 0; j < 4; j++ )
      	{
        	cout << "a[" << i << "][" << j << "]: ";
         	cout << a[i][j]<< endl;
      	}
	}
	
	int (*p)[4];  // 定义一个数组指针，指向含4个元素的一维数组 
	p = a;        // 将二维数组a的首地址赋给p，也就是 a[0] 或 &a[0][0] 
//	p ++;         // 该语句执行过后，也就是 p=p+1; p跨过行 a[0][] 指向了行 a[1][] 
	cout << "---------操作后---------" << endl;
	for ( int i = 0; i < 3; i++ ) {
		for ( int j = 0; j < 4; j++ )
      	{
        	cout << "p[" << i << "][" << j << "]: ";
         	cout << p[i][j] << endl;
      	}
	}
	
	return 0;
}
